// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::GString;
use glib::object::IsA;
use glib::translate::*;
use gtk;
use std::fmt;

glib_wrapper! {
    pub struct Mark(Object<ffi::GtkSourceMark, ffi::GtkSourceMarkClass, MarkClass>) @extends gtk::TextMark;

    match fn {
        get_type => || ffi::gtk_source_mark_get_type(),
    }
}

impl Mark {
    pub fn new(name: &str, category: &str) -> Mark {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gtk_source_mark_new(name.to_glib_none().0, category.to_glib_none().0))
        }
    }
}

pub const NONE_MARK: Option<&Mark> = None;

pub trait MarkExt: 'static {
    fn get_category(&self) -> Option<GString>;

    fn next<'a, P: Into<Option<&'a str>>>(&self, category: P) -> Option<Mark>;

    fn prev(&self, category: &str) -> Option<Mark>;
}

impl<O: IsA<Mark>> MarkExt for O {
    fn get_category(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::gtk_source_mark_get_category(self.as_ref().to_glib_none().0))
        }
    }

    fn next<'a, P: Into<Option<&'a str>>>(&self, category: P) -> Option<Mark> {
        let category = category.into();
        unsafe {
            from_glib_none(ffi::gtk_source_mark_next(self.as_ref().to_glib_none().0, category.to_glib_none().0))
        }
    }

    fn prev(&self, category: &str) -> Option<Mark> {
        unsafe {
            from_glib_none(ffi::gtk_source_mark_prev(self.as_ref().to_glib_none().0, category.to_glib_none().0))
        }
    }
}

impl fmt::Display for Mark {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Mark")
    }
}

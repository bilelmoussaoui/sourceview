// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Completion;
use CompletionActivation;
use CompletionProposal;
use CompletionProvider;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use gtk;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct CompletionContext(Object<ffi::GtkSourceCompletionContext, ffi::GtkSourceCompletionContextClass, CompletionContextClass>);

    match fn {
        get_type => || ffi::gtk_source_completion_context_get_type(),
    }
}

pub const NONE_COMPLETION_CONTEXT: Option<&CompletionContext> = None;

pub trait CompletionContextExt: 'static {
    fn add_proposals<P: IsA<CompletionProvider>>(&self, provider: &P, proposals: &[CompletionProposal], finished: bool);

    fn get_activation(&self) -> CompletionActivation;

    fn get_iter(&self) -> Option<gtk::TextIter>;

    fn set_property_activation(&self, activation: CompletionActivation);

    fn get_property_completion(&self) -> Option<Completion>;

    fn connect_cancelled<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_cancelled(&self);

    fn connect_property_activation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<CompletionContext>> CompletionContextExt for O {
    fn add_proposals<P: IsA<CompletionProvider>>(&self, provider: &P, proposals: &[CompletionProposal], finished: bool) {
        unsafe {
            ffi::gtk_source_completion_context_add_proposals(self.as_ref().to_glib_none().0, provider.as_ref().to_glib_none().0, proposals.to_glib_none().0, finished.to_glib());
        }
    }

    fn get_activation(&self) -> CompletionActivation {
        unsafe {
            from_glib(ffi::gtk_source_completion_context_get_activation(self.as_ref().to_glib_none().0))
        }
    }

    fn get_iter(&self) -> Option<gtk::TextIter> {
        unsafe {
            let mut iter = gtk::TextIter::uninitialized();
            let ret = from_glib(ffi::gtk_source_completion_context_get_iter(self.as_ref().to_glib_none().0, iter.to_glib_none_mut().0));
            if ret { Some(iter) } else { None }
        }
    }

    fn set_property_activation(&self, activation: CompletionActivation) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"activation\0".as_ptr() as *const _, Value::from(&activation).to_glib_none().0);
        }
    }

    fn get_property_completion(&self) -> Option<Completion> {
        unsafe {
            let mut value = Value::from_type(<Completion as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"completion\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn connect_cancelled<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"cancelled\0".as_ptr() as *const _,
                Some(transmute(cancelled_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn emit_cancelled(&self) {
        let _ = unsafe { glib::Object::from_glib_borrow(self.to_glib_none().0 as *mut gobject_ffi::GObject).emit("cancelled", &[]).unwrap() };
    }

    fn connect_property_activation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::activation\0".as_ptr() as *const _,
                Some(transmute(notify_activation_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn cancelled_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkSourceCompletionContext, f: glib_ffi::gpointer)
where P: IsA<CompletionContext> {
    let f: &F = transmute(f);
    f(&CompletionContext::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_activation_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkSourceCompletionContext, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<CompletionContext> {
    let f: &F = transmute(f);
    f(&CompletionContext::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for CompletionContext {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CompletionContext")
    }
}
